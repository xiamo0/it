{
    "java knowledge": {
        "ps": [
            "https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-1.html  java历史",
            "https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html G1z垃圾回收器",
        ],
        "concept": {
            "interface": {
                "offical interface": {
                    "Cloneable": {},
                    "Serializable": {}
                }
            }
        },
        "编程规范": {
            "设计": {
                "规范": [
                    "接口：定义了行为，由实现类实现",
                    "抽象类：定义了行为，由子类继承实现",
                    "类：定义了属性和方法，由对象实例化"
                ]
            },
            "命名": {
                "规则": [
                    "变量名：小写字母开头，驼峰命名法，尽量使用名词",
                    "类名：大写字母开头，驼峰命名法，尽量使用名词",
                    "方法名：小写字母开头，驼峰命名法，尽量使用动词",
                    "常量名：大写字母开头，下划线命名法，尽量使用名词",
                    "包名：小写字母开头，使用点号分隔，尽量使用名词",
                    "接口名：大写字母开头，驼峰命名法，尽量使用名词"
                ]
            },
            "代码格式": {
                "规则": [
                    "{{ 和}} 不要空行",
                    "方法名方法注释之间没有空行",
                    "方法内第一行和最后一行与{}无空行",
                    "方法内 逻辑代码块之间 空一行 区分",
                    "在类名或方法名前加多个注释，按照注释的短长度排列"
                ]
            }
        },
        "jvm": {
            "hotSpot JVM Components": {
                "Class Loader Subsystem": {},
                "Runtime Data Areas": {
                    "Method Area": {},
                    "Heap": {
                        "notes":[
                            "The older garbage collectors (serial, parallel, CMS) all structure the heap into three sections: young generation[eden,S0,S1], old generation, and permanent generation of a fixed memory size."
                        ]
                    },
                    "Java Threads": {},
                    "Program Counter Register": {},
                    "Native Internal Threads": {}
                },
                "Execution Engine": {
                    "JIT Compiler": {},
                    "Garbage Collector": [
                        {
                            "name": "G1",
                            "purpose": [
                                "garbage-first collector（G1）是Oracle HotSpot Java虚拟机（JVM）6中引入的垃圾收集算法，并从7 Update 4中支持。它计划在JVM 7中替换并发标记扫描收集器（CMS），并在Java 9中成为默认值。[1]",
                                "https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html"
                            ],
                            "demo": [
                                "java -XX:+UseG1GC -jar your-application.jar"
                            ]
                        },
                        {
                            "name": "CMS",
                            "purpose": [
                                "CMS Collector 是一种并行的垃圾回收器，旨在减少垃圾回收过程中的暂停时间。",
                            ],
                            "demo": [
                                "java -XX:+UseConcMarkSweepGC -jar your-application.jar"
                            ]
                        }
                    ]
                }
            },
            "Garbage collector": {
                "purpose": [
                    "自动回收不再使用的对象所占用的内存空间",
                    "避免内存泄漏",
                    "提高程序的运行效率",
                    "当堆内存不足时，JVM会触发垃圾回收.也可以通过设置JVM参数来控制垃圾回收的频率和行为"
                ],
                "gc 回收对象基本原理": [
                    "1判断对象是否是没有被引用，如引用计数法，可达性分析法",
                    "标记-清除，复制算法（"
                ],
                "Category": [
                    {
                        "name": "Parallel Collector",
                        "purpose": [
                            "Parallel Collector 是一种多线程的的垃圾回收器，适用于小内存堆"
                        ],
                        "demo": [
                            "java -XX:+UseParallelGC -jar your-application.jar"
                        ]
                    },
                    
                    
                ]
            },
            "jvm 命令": [
                "- XX 参数： 表示非标准的参数，在不同版本的 JVM 中发生变化或被废弃。",
                "-X 参数: 代表标准的 JVM 参数,在不同版本的 JVM 中保持一致。"
            ],
            "jvm 调优": {
                "goal": [
                    "Typically, when tuning a Java application, the focus is on one of two main goals: responsiveness or throughput. We will refer back to these concepts as the tutorial progresses",
                    "Responsiveness refers to how quickly an application or system responds with a requested piece of data. ",
                    "Throughput focuses on maximizing the amount of work by an application in a specific period of time"
                ],
                "内存调优": [
                    "堆大小：通过 -Xms 和 -Xmx 参数设置初始堆大小和最大堆大小。",
                    "年轻代和老年代比例（堆的划分）：通过 -XX:NewRatio 设置年轻代和老年代的比例。",
                    "年轻代大小：通过 -XX:NewSize 和 -XX:MaxNewSize 设置年轻代的初始大小和最大大小",
                    "设置线程栈大小(-Xss): 指定每个线程的栈大小。栈大小决定了每个线程可以使用的栈内存的数量;较大的栈大小意味着每个线程占用更多的内存，从而可能限制系统中可以创建的线程数量。",
                    "GC 日志：使用 -XX:+PrintGCDetails 和 -XX:+PrintGCTimeStamps 来记录 GC 的详细信息",
                    "年轻代和老年代的总和等于堆的大小。"
                ],
                "garbage collector 调优": [
                    "设置并行收集器收集时使用的 CPU 数。并行收集线程数 如：使用Parallel Collector 可设置-XX:ParallelGCThreads=n",
                    "根据应用程序的特点选择合适的垃圾收集器。常见的垃圾收集器包括：",
                    "Serial Collector",
                    "Parallel Collector：",
                    "CMS Collector：",
                    "G1 Collector："
                ]
            },
            "类加载": {
                "类加载过程": [
                    "加载：将类文件读入内存，并创建一个代表这个类的Class对象;",
                    "链接：验证、准备、解析",
                    "初始化:",
                    "使用：",
                    "卸载"
                ],
                "类加载时间": [
                    "遇到 new 关键字、getstatic、putstatic 或 invokestatic 这四条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。",
                    "当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。",
                    "当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() "
                ],
                "类加载器": {
                    "模型": [
                        "Java 类加载器体系结构采用了双亲委派模型",
                        "双亲委派机制：当类加载器试图加载一个类时，首先会向父类加载器请求加载该类，如果父类加载器不能加载该类，则子类加载器才会尝试加载该类。",
                        "这种机制保证了 Java 核心 API 的类始终由启动类加载器加载，从而避免了不同类加载器加载相同类而导致的类隔离问题"
                    ],
                    "加载器类型": [
                        {
                            "BootstrapClassLoader": [
                                "是Java虚拟机自带的类加载器.",
                                "BootstrapClassLoader是Java虚拟机的根类加载器，负责加载Java平台核心类库，<JAVA_HOME>\\lib目录中的类。"
                            ],
                            "ExtensionClassLoader": [
                                "是Java虚拟机的扩展类加载器，用于加载Java扩展类库，<JAVA_HOME>\\lib\\ext目录中的类"
                            ],
                            "ApplicationClassLoader": [
                                "应用程序类加载器",
                                "负责加载用户类路径（CLASSPATH）所指定的类。"
                            ],
                            "Custom ClassLoader": [
                                "自定义类加载器",
                                "用户可以继承 java.lang.ClassLoader 类来实现自定义的类加载器。"
                            ]
                        }
                    ]
                }
            }
        },
        "common programing concepts": {
            "variables": {},
            "basic types": {},
            "functions": {},
            "controll flows": {},
            "keywords": {
                "final": [
                    "final修饰的变量不能被修改",
                    "final修饰的变量必须初始化"
                ],
                "static": [
                    "static修饰的变量属于类，不属于对象",
                    "static修饰的变量属于类，不属于对象，所以static修饰的变量可以不初始化"
                ],
                "abstract": [
                    "抽象类不能被实例化",
                    "抽象类可以包含抽象方法"
                ]
            }
        },
        "多线程": {
            "概念": {
                "可重入锁": [
                    "允许在同一个线程中多次获取同一把锁，而不会导致死锁。可重入锁的设计目的是为了防止死锁的发生",
                    "线程在获取锁之后，可以在锁的范围内再次调用锁定的代码或方法，而不会阻塞自己"
                ],
                "读写锁": [
                    "允许多个读操作并发，但写操作是独占的."
                ],
                "自旋锁": [
                    "当锁被占用时，其他线程会持续检查锁是否可用"
                ],
                "公平锁": [
                    "按照线程请求锁的顺序来分配锁，先请求的线程先获得锁，可以避免某些线程一直饿死。"
                ],
                "非公平锁": [
                    "不保证线程获取锁的顺序，性能通常优于公平锁，因为减少了锁的获取延迟。"
                ]
            },
            "锁，同步工具类": {
                "synchronized": [
                    "目的：保证同一时刻只有一个线程可以执行该代码块，原子性，可见性，有序性",
                    "用法：修饰方法，代码块",
                    "特点：可重入锁。锁的对象可以是实例对象，class类。不需要手动释放锁。"
                ],
                "volatile": [
                    "目的：可见性：当一个线程修改了volatile变量的值，新值对所有其他线程都是立即可见的。这是因为volatile变量的读写操作不会被编译器或处理器重排序，而且写操作会强制将修改的值写回到主内存中，读操作会从主内存中读取最新的值。这种行为确保了即使在多线程环境下，对volatile变量的修改也能被其他线程及时感知。",
                    "用法：声明变量"
                ],
                "ReentrantLock": [
                    "特点：可重入锁，需要手动释放锁,公平锁，非公平锁，可尝试获取锁",
                    "本质 是内部实现了AQS类"
                ],
                "CountDownLatch": [
                    "本质 是内部实现了AQS类",
                    "所有子线程都释放锁后，CountDownLatch才会继续执行"
                ],
                "CyclicBarrier": [
                    "本质 使用ReentrantLock",
                    "可重复使用",
                    "所有子线程都达到屏障点后，才会继续执行"
                ],
                "Semaphore": [],
                "Condition": [
                    "平替Object中的wait和notify方法"
                ],
                "AbstractQueuedSynchronizer": []
            },
            "线程以及管理": {
                "Thread": [],
                "thread group": [],
                "ForkJoinWorkerThread": [],
                "线程生命周期": [
                    "getState()方法",
                    "NEW：线程对象创建但是没有启动",
                    "RUNNABLE：线程可以被其他线程调用start方法启动，执行start()后",
                    "BLOCKED：线程正在等待监视器锁，以便进入synchronized块或方法",
                    "WAITING：当前线程等待别的线程 Object.wait ，Thread.join",
                    "TIMED_WAITING：线程执行完毕或者被终止，Thread.sleep，Object.wait ，Thread.join",
                    "TERMINATED: 线程执行完毕或者被终止"
                ],
                "线程池": {
                    "Executor": {},
                    "Executors": {
                        "newCachedThreadPool()": [
                            "此方法创建一个缓存线程池，可以根据需要动态创建新线程，并终止一段时间未使用的空闲线程。",
                            "new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());",
                            "适合大量耗时短的任务",
                            "需要考虑避免创建过多线程，导致耗尽系统资源"
                        ],
                        "newFixedThreadPool(int nThreads)": [
                            "此方法创建一个具有固定线程数的线程池，确保池中的线程数保持不变。",
                            "return new ThreadPoolExecutor(nThreads, nThreads,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());",
                            "适合明确的任务量的场景"
                        ],
                        "newSingleThreadExecutor()": [
                            "",
                            "return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>()));",
                            "确保任务按照提交的顺序执行，而不需要管理多个线程的复杂性和潜在问题的场景"
                        ],
                        "newScheduledThreadPool(int corePoolSize)": [
                            " new ScheduledThreadPoolExecutor(corePoolSize);",
                            "适合 周期或延迟执行的任务场景"
                        ],
                        "newWorkStealingPool(int parallelism)": [
                            "new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);",
                            "java8新增",
                            "在工作窃取线程池中，每个线程都有自己的任务队列。当线程完成其任务时，它会尝试从其他线程的队列中“窃入”任务。",
                            "耗时不等的多任务场景"
                        ],
                        "newSingleThreadScheduledExecutor": [
                            "return new DelegatedScheduledExecutorService(new ScheduledThreadPoolExecutor(1));",
                            "适合序列化的任务场景，不必考虑并发问题"
                        ],
                        "privilegedThreadFactory()": [],
                        "defaultThreadFactory()": [
                            "return new DefaultThreadFactory();",
                            "适用于大多数需要具有默认属性的线程的标准应用程序。"
                        ],
                        "unconfigurableExecutorService": [
                            "1️⃣封装：将现有的ExecutorService包装在不可配置的代理中。2️⃣不可变配置：任何更改配置的方法调用，如shutdown、shutNow、setCorePoolSize等，都将抛出UnsupportedOperationException。3️⃣委托：其他方法调用被委托给原始的ExecutorService。",
                            "return new DelegatedExecutorService(executor);",
                            "共享线程池：适用于多个组件共享同一线程池时，防止一个组件意外修改配置。"
                        ]
                    },
                    "ThreadPoolExecutor": {},
                    "FinalizableDelegatedExecutorService": {},
                    "ScheduledThreadPoolExecutor": {},
                    "ForkJoinPool": {},
                    "AbstractExecutorService": {},
                    "DelegatedScheduledExecutorService": {},
                    "DelegatedExecutorService": {
                        ""
                    }
                },
                "线程工具": [
                    "参考文档：https://www.pixelstech.net/article/1721444864-9-Ways-to-Create-Thread-Pools-with-Java-Executors ，"
                ]
            }
        },
        "集合": {
            "Comparator": {
                "type": "interface",
                "feature": []
            },
            "RandomAccess": {
                "type": "interface",
                "feature": []
            },
            "Iterator": {
                "type": "interface",
                "feature": {
                    "": [
                        "java8 新增了 默认方法 forEachRemaining 方便所有元素执行某个操作"
                    ]
                }
            },
            "Map": {
                "type": "interface",
                "feature": [
                    "定义 内部接口 Entry",
                    "定义 操作map的 常见方法：isEmpty,get,put,remove,clear,size,keySets,values()",
                    "定义 创建 多种不可变map 的静态方法",
                    "线程不安全"
                ],
                "children": {
                    "AbstractMap": {
                        "type": "class",
                        "feature": [],
                        "children": {
                            "HashMap": [
                                "底层使用Node数组,存储数据,数据元素Node 又细分为Node数组，TreeNode, ",
                                "线程不安全",
                                "允许一个null键,允许多个null值",
                                "扩容机制：当HashMap中的元素数量达到容量乘以负载因子时，会触发扩容操作",
                                "插入数据步骤：1️⃣如果哈希表为空，则进行初始化。2️⃣根据哈希值和哈希表长度计算出插入位置。3️⃣如果插入位置为空，则创建新节点并插入。4️⃣如果插入位置已有节点：1.如果节点的键与插入键等，则更新节点的值并返回旧值。2.如果节点是TreeNode（表示是一个红黑树节点），则调用putTreeVal方法进行树中插入操作。3否则，遍历链表，找到第一个哈希值和键相等的节点，进行相同操作,并链表转换为TreeNode。",
                                "删除数据步骤：",
                                "在使用 HashMap 时，如果要用自定义类作为键（key），那么通常需要重写 hashCode() 和 equals() 方法,因为 1️⃣如果不重写 equals() 方法，那么即使两个对象具有相同的属性值，HashMap 也会认为它们是不同的键，这会导致数据存储错误；2️⃣HashMap 是基于哈希表实现的，它使用 hashCode() 方法来计算键的哈希值，这个哈希值决定了键值对在内部数组中的位置，如果不重写 hashCode() 方法，那么默认的哈希值可能不足以区分具有相似属性的不同对象，从而导致哈希冲突增加，影响性能"
                            ],
                            "TreeMap": [
                                "红黑树",
                                "线程不安全",
                                "可以自定义 键的排序顺序",
                                "适用于需要排序或查找特定范围的键值对的场景"
                            ],
                            "LinkedHashMap": [
                                "继承 HashMap",
                                "线程不安全",
                                "适用于需要保持元素插入或访问顺序的场景，同时保持高效查找性能。"
                            ]
                        }
                    }
                }
            },
            "Iterable": {
                "type": "interface",
                "feature": [
                    "定义了，forEach "
                ],
                "children": {
                    "Collection": {
                        "children": {
                            "Set": {
                                "feature": [],
                                "children": {}
                            },
                            "Queue": {
                                "feature": []
                            },
                            "AbstractCollection": {
                                "feature": {},
                                "children": {
                                    "AbstractQueue": {
                                        "feature": [],
                                        "children": {
                                            "LinkedBlockingQueue": {
                                                "feature": []
                                            },
                                            "SynchronousQueue": {
                                                "feature": []
                                            }
                                        }
                                    },
                                    "AbstractSet": {
                                        "feature": [],
                                        "children": {
                                            "HashSet": {
                                                "feature": [
                                                    "底层使用HashMap存储数据",
                                                    "线程不安全",
                                                    "允许null"
                                                ],
                                                "children": {
                                                    "LinkedHashSet": {
                                                        "feature": [
                                                            "底层使用LinkedHashMap存储数据",
                                                            "线程不安全"
                                                        ]
                                                    }
                                                }
                                            },
                                            "TreeSet": {
                                                "feature": [
                                                    "底层使用TreeMap存储数据",
                                                    "线程不安全"
                                                ]
                                            }
                                        }
                                    },
                                    "AbstractList": {
                                        "children": {
                                            "ArrayList": [
                                                "动态数组",
                                                "线程不安全",
                                                "扩容机制：没有指定初始容量，它默认容量是 10,默认的扩容策略是新容量为当前容量的1.5倍"
                                            ],
                                            "Vector": {
                                                "feature": [
                                                    "动态数组",
                                                    "线程安全,synchronized修饰方法",
                                                    "扩容机制：默认容量是 10, 当Vector的元素数量达到当前容量时，Vector会自动扩容。默认情况下，Vector的扩容策略是将当前容量增加一倍",
                                                    "适合多读少写场景"
                                                ],
                                                "children": {
                                                    "stack": {}
                                                }
                                            },
                                            "AbstractSequentialList": {
                                                "children": {
                                                    "LinkedList": {
                                                        "feature": [
                                                            "双向链表",
                                                            "线程不安全",
                                                            "扩容机制：无",
                                                            "LinkedList在插入和删除操作上通常比ArrayList快，因为不需要移动元素,但是，随机访问元素时，LinkedList需要从头或尾部遍历链表这会导致O(n)的时间复杂度，而ArrayList的随机访问时间复杂度为O(1)"
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "List": {
                                "feature": {},
                                "children": {
                                    "CopyOnWriteArrayList": {
                                        "feature": [
                                            "动态数组",
                                            "线程安全",
                                            "扩容机制：",
                                            "CopyOnWriteArrayList是线程安全的，但是，它的性能却比ArrayList差，因为每次写入都需要复制一份数组，所以，如果写入操作的次数远多于读取操作的次数，那么CopyOnWriteArrayList性能就非常差。",
                                            "适合多读少写场景",
                                            "todo null",
                                            "CopyOnWriteArrayList的迭代器提供了一个快照视图，在迭代过程中集合的修改不会反映在迭代器上。迭代器不会抛出ConcurrentModificationException，但返回的数据可能不是最新的。",
                                            "写操作过程：1️⃣获取ReentrantLock锁，确保写操作的排他性，防止其他写操作同时进行。2️⃣创建当前base数组的副本。3️⃣在副本上执行所需的写操作。4️⃣更新base数组的引用，使其指向新的副本。5️⃣释放锁。"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}